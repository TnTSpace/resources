<script lang="ts">
	import BannerForm from '$lib/components/forms/BannerForm.svelte';
	import HomepageForm from '$lib/components/forms/HomepageForm.svelte';
	import ProductCarouselForm from '$lib/components/forms/ProductCarouselForm.svelte';
	import { Button } from '$lib/components/ui/button';
	import { Card } from '$lib/components/ui/card';
	import Select from '$lib/components/widgets/Select.svelte';
	import { eWidgetType, widgetOptions } from '$lib/constants';
	import type { iUser, iWidget, WidgetType } from '$lib/interface';
	import type { PageData } from './$types';
	import { dndzone } from 'svelte-dnd-action';
	import { flip } from 'svelte/animate';
	import { removeRingClasses, type iResult } from '@toolsntuts/utils';
	import { getContext } from 'svelte';
	import { toast } from 'svelte-sonner';

	let { data }: { data: PageData } = $props();

	const products = data.products;
	const me = getContext('me') as iUser;

	let items = $state<iWidget[]>([]);
	// let items = $state([
	// 	{ id: 1, name: 'item1' },
	// 	{ id: 2, name: 'item2' },
	// 	{ id: 3, name: 'item3' },
	// 	{ id: 4, name: 'item4' }
	// ]);
	const flipDurationMs = 300;

	const handleDndConsider = (e: CustomEvent) => {
		items = [...e.detail.items];
	};

	const handleDndFinalize = (e: CustomEvent) => {
		items = [...e.detail.items];
	};

	// **** Svelte DND Action ****

	const onAddWidget = async (type: WidgetType) => {
		let partialWidget: Partial<iWidget>;

		if (type === eWidgetType.BANNER) {
			const bannerPos = items.length + 1;
			partialWidget = {
				title: '',
				subline: '',
				url: '',
				position: bannerPos,
				type: eWidgetType.BANNER
			};
		} else {
			const carouselPos = items.length + 1;
			partialWidget = {
				title: '',
				subline: '',
				url: '',
				position: carouselPos,
				type: eWidgetType.PRODUCTCAROUSEL
			};
		}

		try {
			const url = '/api/widget';
			const options: RequestInit = {
				method: 'POST',
				headers: {
					'Content-Type': 'application/json'
				},
				body: JSON.stringify({ partialWidget, me })
			};

			const response = await fetch(url, options);
			const { status, message, data } = (await response.json()) as iResult;

			if (status === 'error') {
				toast.error(message);
			} else {
				const widget = data as iWidget;
				items = [...items, { ...widget, id: widget.xata_id }];
			}
		} catch (error: any) {
			toast.error(error.message);
		}
	};

	const ondelete = async (id: string) => {
		console.log('deleting', id);

		try {
			const url = '/api/widget';
			const options: RequestInit = {
				method: 'DELETE',
				headers: {
					'Content-Type': 'application/json'
				},
				body: JSON.stringify({ id, me })
			};

			const response = await fetch(url, options);
			const { status, message } = (await response.json()) as iResult;

			console.log({ from: 'delete', status, message });
			if (status === 'error') {
				toast.error(message);
			} else {
				items = items.filter((item) => item?.xata_id !== id);
			}
		} catch (error: any) {
			toast.error(error.message);
		}
	};

	const onselected = (selected: string) => {
		const type = selected as WidgetType;
		onAddWidget(type);
	};

	$effect(() => console.log({ items: { ...items } }));
</script>

<div class="flex flex-col space-y-4 p-4 pt-6">
	<Card
		class="mt-auto flex flex-col items-center justify-between gap-2 rounded-lg border-t-2 border-t-primary p-2 dark:bg-secondary md:flex-row"
	>
		<Select
			class="w-full md:max-w-sm"
			shouldResetOnSelection={true}
			{onselected}
			options={widgetOptions}
			name="type"
		/>
		<Button class="w-full md:w-fit">Save</Button>
	</Card>
	<div class="grid grid-cols-[1fr_80px] gap-4">
		<section
			use:dndzone={{ items: items ?? [], flipDurationMs }}
			onconsider={handleDndConsider}
			onfinalize={handleDndFinalize}
			class="grid grid-cols-1 gap-4"
		>
			<!-- {#each items as item (item.id)}
				<div animate:flip={{ duration: flipDurationMs }}>{item.name}</div>
			{/each} -->
			{#key items.length}
				{#each items as item (item?.xata_id || item.id || Math.random())}
					<div animate:flip={{ duration: flipDurationMs }}>
						{#if item!.type === eWidgetType.BANNER}
							<BannerForm widget={item} {ondelete} />
						{/if}

						{#if item!.type === eWidgetType.PRODUCTCAROUSEL}
							<ProductCarouselForm widget={item} {products} {ondelete} />
						{/if}
					</div>
				{/each}
			{/key}
		</section>
	</div>
</div>
